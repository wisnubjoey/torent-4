# OpenAPI 3.1 definition for Vehicle Rental Platform MVP HTTP endpoints
openapi: 3.1.0
info:
  title: Vehicle Rental Platform API
  version: 0.1.0
  summary: Booking, availability, and administration endpoints for the MVP
servers:
  - url: https://localhost
    description: Local development
components:
  securitySchemes:
    UserSession:
      type: http
      scheme: bearer
      bearerFormat: JWT
    AdminSession:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RentalStatus:
      type: string
      enum: [pending, active, completed]
    VehicleType:
      type: string
      enum: [car, motorcycle]
    AvailabilityStatus:
      type: string
      enum: [available, unavailable]
    AvailabilityReason:
      type: string
      enum: [rental, maintenance, manual_block]
    VehicleSummary:
      type: object
      required: [id, name, type, baseRate, capacity, isActive, nextAvailableOn]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        type:
          $ref: '#/components/schemas/VehicleType'
        baseRate:
          type: number
          format: float
        capacity:
          type: integer
          minimum: 1
        imageUrl:
          type: string
          format: uri
          nullable: true
        isActive:
          type: boolean
        nextAvailableOn:
          type: string
          format: date
          nullable: true
    VehicleDetail:
      allOf:
        - $ref: '#/components/schemas/VehicleSummary'
        - type: object
          required: [description, availability]
          properties:
            description:
              type: string
            availability:
              type: array
              items:
                $ref: '#/components/schemas/AvailabilityWindow'
    AvailabilityWindow:
      type: object
      required: [startDate, endDate, status, reason]
      properties:
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        status:
          $ref: '#/components/schemas/AvailabilityStatus'
        reason:
          $ref: '#/components/schemas/AvailabilityReason'
    RentalItemInput:
      type: object
      required: [vehicleId, quantity]
      properties:
        vehicleId:
          type: string
          format: uuid
        quantity:
          type: integer
          minimum: 1
    RentalSummary:
      type: object
      required: [id, status, startDate, endDate, driverRequested, totalAmount, items]
      properties:
        id:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/RentalStatus'
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        driverRequested:
          type: boolean
        totalAmount:
          type: number
          format: float
        items:
          type: array
          items:
            type: object
            required: [vehicle, quantity]
            properties:
              vehicle:
                $ref: '#/components/schemas/VehicleSummary'
              quantity:
                type: integer
        whatsappLink:
          type: string
          format: uri
          description: Prebuilt wa.me link
    DashboardMetrics:
      type: object
      required: [pending, active, completed, upcomingReturns, availableVehicles]
      properties:
        pending:
          type: integer
          minimum: 0
        active:
          type: integer
          minimum: 0
        completed:
          type: integer
          minimum: 0
        upcomingReturns:
          type: integer
          minimum: 0
        availableVehicles:
          type: integer
          minimum: 0
paths:
  /auth/user/login:
    post:
      summary: Authenticate a user by phone number and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [phoneNumber, password]
              properties:
                phoneNumber:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login succeeded
          content:
            application/json:
              schema:
                type: object
                required: [token]
                properties:
                  token:
                    type: string
        '401':
          description: Invalid credentials or locked account
  /auth/user/otp/verify:
    post:
      summary: Verify OTP for phone confirmation or sensitive actions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [phoneNumber, otp]
              properties:
                phoneNumber:
                  type: string
                otp:
                  type: string
      responses:
        '204':
          description: OTP verified
        '400':
          description: Invalid or expired OTP
        '429':
          description: Too many attempts
  /auth/admin/login:
    post:
      summary: Authenticate an admin by username and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login succeeded
          content:
            application/json:
              schema:
                type: object
                required: [token]
                properties:
                  token:
                    type: string
        '401':
          description: Invalid credentials
  /user/dashboard:
    get:
      summary: Retrieve user dashboard metrics and quick actions
      security:
        - UserSession: []
      responses:
        '200':
          description: Dashboard payload
          content:
            application/json:
              schema:
                type: object
                required: [metrics, latestRentals, quickActions]
                properties:
                  metrics:
                    $ref: '#/components/schemas/DashboardMetrics'
                  latestRentals:
                    type: array
                    items:
                      $ref: '#/components/schemas/RentalSummary'
                  quickActions:
                    type: array
                    items:
                      type: string
  /user/rentals/history:
    get:
      summary: Retrieve paginated historical rentals for a user
      security:
        - UserSession: []
      parameters:
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/RentalStatus'
        - in: query
          name: from
          schema:
            type: string
            format: date
        - in: query
          name: to
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Historical rental collection
          content:
            application/json:
              schema:
                type: object
                required: [data]
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RentalSummary'
  /vehicles:
    get:
      summary: List vehicles with optional filtering
      security:
        - UserSession: []
      parameters:
        - in: query
          name: type
          schema:
            $ref: '#/components/schemas/VehicleType'
        - in: query
          name: availableOn
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Paginated vehicle collection
          content:
            application/json:
              schema:
                type: object
                required: [data]
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/VehicleSummary'
  /vehicles/{vehicleId}:
    get:
      summary: Fetch vehicle details and availability windows
      security:
        - UserSession: []
      parameters:
        - in: path
          name: vehicleId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Vehicle detail response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleDetail'
        '404':
          description: Vehicle not found
  /rentals:
    post:
      summary: Create a rental request
      security:
        - UserSession: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [startDate, endDate, items, driverRequested]
              properties:
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
                driverRequested:
                  type: boolean
                items:
                  type: array
                  minItems: 1
                  items:
                    $ref: '#/components/schemas/RentalItemInput'
      responses:
        '201':
          description: Rental created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RentalSummary'
        '400':
          description: Validation error (date overlap, inactive vehicle, etc.)
        '409':
          description: Vehicle unavailable for requested dates
  /rentals/{rentalId}/whatsapp:
    post:
      summary: Generate WhatsApp deeplink for checkout
      security:
        - UserSession: []
      parameters:
        - in: path
          name: rentalId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: WhatsApp link generated
          content:
            application/json:
              schema:
                type: object
                required: [waLink]
                properties:
                  waLink:
                    type: string
                    format: uri
  /admin/dashboard:
    get:
      summary: Admin overview metrics
      security:
        - AdminSession: []
      responses:
        '200':
          description: Admin dashboard payload
          content:
            application/json:
              schema:
                type: object
                required: [metrics, upcomingDeadlines]
                properties:
                  metrics:
                    $ref: '#/components/schemas/DashboardMetrics'
                  upcomingDeadlines:
                    type: array
                    items:
                      type: object
                      required: [rentalId, vehicleName, dueOn]
                      properties:
                        rentalId:
                          type: string
                          format: uuid
                        vehicleName:
                          type: string
                        dueOn:
                          type: string
                          format: date
  /admin/vehicles:
    post:
      summary: Create a new vehicle
      security:
        - AdminSession: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, type, baseRate, capacity]
              properties:
                name:
                  type: string
                type:
                  $ref: '#/components/schemas/VehicleType'
                baseRate:
                  type: number
                  format: float
                capacity:
                  type: integer
                  minimum: 1
                description:
                  type: string
                imageUrl:
                  type: string
                  format: uri
                  nullable: true
      responses:
        '201':
          description: Vehicle created
    get:
      summary: List vehicles for admin management
      security:
        - AdminSession: []
      responses:
        '200':
          description: Vehicle listing
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VehicleDetail'
  /admin/vehicles/{vehicleId}:
    patch:
      summary: Update vehicle details
      security:
        - AdminSession: []
      parameters:
        - in: path
          name: vehicleId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                baseRate:
                  type: number
                  format: float
                capacity:
                  type: integer
                  minimum: 1
                description:
                  type: string
                isActive:
                  type: boolean
      responses:
        '200':
          description: Vehicle updated
        '404':
          description: Vehicle not found
    delete:
      summary: Archive a vehicle
      security:
        - AdminSession: []
      parameters:
        - in: path
          name: vehicleId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Vehicle archived
        '409':
          description: Vehicle has active or upcoming rentals
  /admin/rentals:
    get:
      summary: List rentals with filtering controls
      security:
        - AdminSession: []
      parameters:
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/RentalStatus'
        - in: query
          name: dueBefore
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Rental collection
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RentalSummary'
  /admin/rentals/{rentalId}/status:
    post:
      summary: Advance rental status
      security:
        - AdminSession: []
      parameters:
        - in: path
          name: rentalId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  $ref: '#/components/schemas/RentalStatus'
      responses:
        '200':
          description: Rental status updated
        '400':
          description: Invalid transition
  /admin/availability:
    post:
      summary: Create or update manual availability blocks
      security:
        - AdminSession: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [vehicleId, startDate, endDate, status, reason]
              properties:
                vehicleId:
                  type: string
                  format: uuid
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
                status:
                  $ref: '#/components/schemas/AvailabilityStatus'
                reason:
                  $ref: '#/components/schemas/AvailabilityReason'
      responses:
        '201':
          description: Availability window saved
        '409':
          description: Overlapping availability entry detected
